---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Backend Structure Document

The Insurance Simulation Game leverages R and Shiny to create an engaging, interactive web application. Below is an overview of the backend setup designed to simplify complex insurance simulation logic while ensuring robust performance, scalability, and security.

## Backend Architecture

Our backend is built using R and the Shiny framework, making use of a modular, event-driven architecture. This setup helps us manage complex simulation scenarios and ensures that gameplay is both dynamic and reactive. Key aspects of our architecture include:

- **Modular Code Structure:** 
  - Code is separated into Shiny modules for different simulation components (e.g., inbox system, dashboards, admin controls).
  - This modularity simplifies maintenance and makes it easier to roll out new features.

- **Reactive Programming:** 
  - The reactive elements of Shiny enable real-time updates in response to user actions. For example, when a player submits a decision, the game state is immediately updated.

- **Design Patterns:** 
  - The architecture follows the MVC (Model-View-Controller) pattern, ensuring a clear separation of data management (Model), user interface (View), and backend logic (Controller).

- **Scalability:** 
  - Designed to handle synchronous multiplayer sessions with up to 200 players per turn, ensuring the game remains responsive during peak activity.
  - The modular nature allows for easy scaling, both vertically and horizontally.

- **Maintainability:** 
  - Code reusability and separation of concerns make the application easier to update and debug.

## Database Management

Persistent player data and simulation details are crucial to the Insurance Simulation Game. To ensure data integrity and ease of access, the following practices and technologies are applied:

- **Database Type:** SQL database chosen for structured and relational data management.
- **Technology Options (bullet points):**
  - PostgreSQL
  - SQLite (for development or smaller-scale operations)

- **Data Handling:** 
  - All persistent data is organized into tables that store player profiles, game sessions, simulation events, and admin settings.
  - Data is accessed through secure database connections and using R packages that integrate seamlessly with SQL databases.

## Database Schema

Below is a human-readable explanation of our database schema along with an example SQL schema outline.

**Human-Readable Schema Description:**

- **Users Table:** Contains information on each user including login credentials, profiles, and their selected executive settings.
- **Game_Sessions Table:** Maintains records of each simulation session including start time, current state, and parameters. 
- **Decisions Table:** Stores individual player decisions for each turn, referencing the related user and game session.
- **Simulation_Events Table:** Logs events generated by the game (inbox notifications, alerts, system messages) and their outcomes.
- **Admin_Settings Table:** Holds parameters customizable by facilitators, such as simulation variables for demand, risk, and cost structures.

**Example SQL Schema Outline (PostgreSQL):**

--------------------------------------------------------------------
-- Users Table
CREATE TABLE Users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    profile JSONB,  -- Contains executive profile details: major, university, skills, etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Game Sessions Table
CREATE TABLE Game_Sessions (
    session_id SERIAL PRIMARY KEY,
    session_name VARCHAR(100),
    start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    state JSONB,  -- Stores current game state and session-specific parameters.
    updated_at TIMESTAMP
);

-- Decisions Table
CREATE TABLE Decisions (
    decision_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES Users(user_id),
    session_id INT REFERENCES Game_Sessions(session_id),
    decision JSONB,  -- Detailed decision data (investment, premium adjustments, etc.)
    decision_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Simulation Events Table
CREATE TABLE Simulation_Events (
    event_id SERIAL PRIMARY KEY,
    session_id INT REFERENCES Game_Sessions(session_id),
    event_type VARCHAR(50),
    event_details JSONB,
    event_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Admin Settings Table
CREATE TABLE Admin_Settings (
    setting_id SERIAL PRIMARY KEY,
    parameter_name VARCHAR(100) UNIQUE NOT NULL,
    parameter_value JSONB,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
--------------------------------------------------------------------

## API Design and Endpoints

The API layer, built into our Shiny application, follows RESTful principles. This design ensures seamless communication between the frontend (game UI) and the backend (simulation logic, database operations, and admin functions). Here are the key aspects:

- **API Approach: RESTful**

- **Key Endpoints:**
  - **Login/Authentication Endpoint:** Validates user credentials and initiates a new session.
  - **User Profile Endpoint:** Retrieves and updates executive profile details.
  - **Game State Endpoint:** Allows players and the admin to pull the current game state for display and processing.
  - **Decision Submission Endpoint:** Receives player decisions during active game rounds and stores them securely.
  - **Simulation Event Endpoint:** Fetches event history and notifies players of new events.
  - **Admin Control Endpoint:** Enables game administrators to update simulation parameters and override settings when required.

## Hosting Solutions

The entire application is hosted on shinyapps.io, a cloud hosting platform tailored for Shiny applications. This platform provides:

- **Reliability:** 
  - Managed hosting with automatic scaling and high uptime.
  - Simplifies deployment by abstracting server management tasks.

- **Scalability:**
  - Capable of handling synchronous multiplayer sessions of up to 200 players.
  - Resources can be scaled up based on simulation load.

- **Cost-effectiveness:**
  - Pricing models based on usage, making it a practical choice for educational and simulation platforms.

## Infrastructure Components

Several key infrastructure components ensure optimal application performance and a smooth user experience:

- **Load Balancers:** 
  - Shinyapps.io distributes incoming traffic evenly across available resources to maintain performance during peak usage.

- **Caching Mechanisms:** 
  - Temporary data caching is implemented within the application to speed up frequently accessed data points, such as dashboard statistics and user session data.

- **Content Delivery Networks (CDNs):** 
  - While mostly powered by shinyapps.io, static assets (such as images and style sheets) can be delivered through a CDN to reduce load times.

## Security Measures

Security is a critical focus for the simulation game, particularly when handling sensitive user data and financial simulation parameters. Implemented measures include:

- **Authentication and Authorization:**
  - Secure login protocols and session management using encrypted tokens.
  - Role-based access control ensures only authorized users can access admin functionalities.

- **Data Encryption:**
  - All data transmitted between the client and server is encrypted using HTTPS.
  - Sensitive information, such as passwords, is stored in hashed form (using secure algorithms).

- **Secure Data Access:**
  - Database connections are secured and monitored to prevent unauthorized data access.
  - Regular audits are conducted to ensure compliance with best practices.

## Monitoring and Maintenance

Regular monitoring and maintenance are critical to the application's stability. Key practices include:

- **Performance Monitoring:**
  - Use of logging tools within Shiny to monitor session activity and track errors.
  - Integrated monitoring solutions on shinyapps.io to track server load and response times.

- **Routine Maintenance:**
  - Periodic updates and patches to the R environment and packages.
  - Scheduled backups of the SQL database ensure that player data and simulation history are secure in case of failures.

- **Alert Systems:**
  - Configured alerts for unusual activity or spikes in error logs, enabling quick response to potential issues.

## Conclusion and Overall Backend Summary

The backend of the Insurance Simulation Game is designed for robustness, scalability, and security. Key points include:

- **Architecture:** Modular, reactive, and based on established design patterns like MVC.
- **Data Management:** Uses a SQL database system (with PostgreSQL or SQLite options) to securely store and access structured data.
- **API Endpoints:** RESTful APIs ensure smooth communication between the game frontend and backend services.
- **Hosting:** Deployed on shinyapps.io, taking advantage of its reliability, scalability, and cost-effectiveness.
- **Infrastructure Components:** Incorporates load balancing, caching, and CDN services to enhance user experience.
- **Security:** Implements robust authentication, secure data encryption, and strict access controls to protect user information.
- **Maintenance:** Ongoing monitoring, backup strategies, and performance tuning secure the longevity and efficiency of the application.

Overall, the backend aligns with the projectâ€™s goals by providing a responsive, secure, and scalable infrastructure to support an engaging educational simulation experience. This comprehensive setup not only meets the current needs but also sets a strong foundation for future enhancements and increased player engagement.

**Tech Stack Used:**
- Frontend: R Shiny, Darkly Shiny theme
- Backend: R
- Hosting: shinyapps.io
- AI Tools: Cursor (IDE), Claude 3.7 Sonnet, Claude 3.5 Sonnet, Gemini 2.5 Pro
